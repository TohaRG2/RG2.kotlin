package ru.tohaman.rg3.util

import ru.tohaman.rg3.R

/**
 * Created by Test on 25.12.2017.
 * Таблицы соответствий to необходимые для алгоритмов сборки кубика
 */

// Табличка цветов кубика 0-синий, 1-оранжевый и т.д.
val cubeColor = intArrayOf(
        R.color.cube_blue,
        R.color.cube_orange,
        R.color.cube_white,
        R.color.cube_red,
        R.color.cube_yellow,
        R.color.cube_green)

//Создаем табличку (словарь) номеров основных ребер, для определенных сочетаний цветов, остальные элементы равны null
//первое число цвет, например 12 = синий 1 + оранжевый 2
//второе число номер основного(первого) цвета как элемента куба (0..53)
val mainEdge = hashMapOf(
        12 to 3,      //для сине-оранжевого ребра
        13 to 7,      //для сине-белого ребра
        14 to 5,      //для сине-красного ребра
        15 to 1,      //для сине-желтого ребра
        21 to 10,     //для оранжево-синей ребра
        23 to 14,     //для оранжево-белого ребра
        25 to 12,     //для оранжево-желтого ребра
        26 to 16,     //для оранжево-зеленого ребра
        31 to 19,     //для бело-синей ребра
        32 to 21,     //для бело-оранжевого ребра
        34 to 23,     //для бело-красного ребра
        36 to 25,     //для бело-зеленого ребра
        41 to 28,     //для красно-синей ребра
        43 to 30,     //для красно-белого ребра
        45 to 32,     //для красно-желтого ребра
        46 to 34,     //для красно-зеленого ребра
        51 to 37,     //для желто-синей ребра
        52 to 41,     //для желто-оранжевого ребра
        54 to 39,     //для желто-красного ребра
        56 to 43,     //для желто-зеленого ребра
        62 to 48,     //для зелено-оранжевого ребра
        63 to 46,     //для зелено-белого ребра
        64 to 50,     //для зелено-красного ребра
        65 to 52)     //для зелено-желтого ребра

//Создаем табличку соответствия основного цвета и дополнительного цвета ребра [где искать второй цвет)
//первая и вторая цифра номер соответствующих друг другу позиций ребра в кубе. т.е. 1->37, 37->1
val dopEdge = hashMapOf(
        1 to 37,           //сине-желтое
        3 to 10,           //сине-оранжевое
        5 to 28,           //сине-красное
        7 to 19,           //сине-белое
        10 to 3,           //оранжево-синяя
        12 to 41,          //оранжево-желтое
        14 to 21,          //оранжево-белое
        16 to 48,          //оранжево-зеленое
        19 to 7,           //бело-синяя
        21 to 14,          //бело-оранжевое
        23 to 30,          //бело-красное
        25 to 46,          //бело-зеленое
        28 to 5,           //красно-синяя
        30 to 23,          //красно-белое
        32 to 39,          //красно-желтое
        34 to 50,          //красно-зеленое
        37 to 1,           //желто-синяя
        39 to 32,          //желто-красное
        41 to 12,          //желто-оранжевое
        43 to 52,          //желто-зеленое
        46 to 25,          //зелено-белое
        48 to 16,          //зелено-оранжевое
        50 to 34,          //зелено-красное
        52 to 43)          //зелено-желтое

//Создаем табличку номеров основных углов to для определенных сочетаний цветов (по цвету его место)
//первое число цвет to например 12 = синий 1 + оранжевый 2
//второе число номер основного(первого) цвета как элемента куба (0..53)
val mainCorner = hashMapOf(
        12 to 0,      //для сине-оранжево-желтого угла
        13 to 6,      //для сине-бело-оранжевого угла
        14 to 8,      //для сине-красно-белого угла
        15 to 2,      //для сине-желто-красного угла
        21 to 11,     //для оранжево-сине-белого угла
        23 to 17,     //для оранжево-бело-зеленого угла
        25 to 9,     //для оранжево-желто-синего угла
        26 to 15,     //для оранжево-зелено-желтого угла
        31 to 20,     //для бело-сине-красного угла
        32 to 18,     //для бело-оранжево-синего угла
        34 to 26,     //для бело-красно-зеленого угла
        36 to 24,     //для бело-зелено-оранжевого угла
        41 to 29,     //для красно-сине-желтого угла
        43 to 27,     //для красно-бело-синего угла
        45 to 35,     //для красно-желто-зеленого угла
        46 to 33,     //для красно-зелено-белого угла
        51 to 38,     //для желто-сине-оранжевого угла
        52 to 44,     //для желто-оранжево-зеленого угла
        54 to 36,     //для желто-красно-синего угла
        56 to 42,     //для желто-зелено-красного угла
        62 to 45,     //для зелено-оранжево-белого угла
        63 to 47,     //для зелено-бело-красного угла
        64 to 53,     //для зелено-красно-желтого угла
        65 to 51)     //для зелено-желто-оранжевого угла

//Создаем табличку соответствия основного и дополнительного угла [где искать второй цвет]
//углы рассматриваем по часовой стрелке to поэтому достаточно первых двух цветов to чтобы пределить угол
//первая и вторая цифра номер соответствующих позиций угла в кубе. т.е. 0->9 to 9->38 to 38->0
val dopCorner = hashMapOf(
        0 to 9,       //сине-оранжево-желтый Л
        2 to 36,       //сине-желто-красный К
        6 to 18,       //сине-бело-оранжевый М
        8 to 27,       //сине-красно-белый И
        9 to 38,      //оранжево-желто-синий Р
        11 to 6,       //оранжево-сине-белый Н
        15 to 51,      //оранжево-зелено-желтый П
        17 to 24,      //оранжево-бело-зеленый О
        18 to 11,      //бело-оранжево-синий А
        20 to 8,      //бело-сине-красный Б
        24 to 45,      //бело-зелено-оранжевый Г
        26 to 33,      //бело-красно-зеленый В
        27 to 20,      //красно-бело-синяя Ф
        29 to 2,      //красно-сине-желтая У
        33 to 47,      //красно-зелено-белая С
        35 to 42,      //красно-желто-зеленая Т
        36 to 29,      //желто-красно-синяя Ц
        38 to 0,      //желто-сине-оранжевая Х
        42 to 53,      //желто-зелено-красная Ч
        44 to 15,      //желто-оранжево-зеленая Ш
        45 to 17,      //зелено-оранжево-белая Д
        47 to 26,      //зелено-бело-красная Е
        51 to 44,      //зелено-желто-оранжевая З
        53 to 35)      //зелено-красно-желтая Ж

// Порядок поиска свободной корзины для переплавки ребра
val edgePriority = hashMapOf(
        0 to 21,     // в первую очередь проверяем не занята ли бело-оранжевое ребро
        1 to 25,            // бело-зеленое
        2 to 48,            // зелено-оранжевое
        3 to 3,             // сине-оранжевое
        4 to 41,            // желто-оранжевое
        5 to 43,            // желто-зеленое
        6 to 37,            // желто-синее
        7 to 39,            // желто-красное
        8 to 7,             // сине-белое
        9 to 34,            // красно-зеленое
        10 to 28)            // красно-синее

// Порядок поиска свободной корзины для переплавки угла
val cornerPriority = hashMapOf(
        0 to 26,     // в первую очередь проверяем не занят ли бело-красно-зеленый угол
        1 to 44,            // желто-зелено-оранжевый
        2 to 36,            // желто-красно-синий
        3 to 42,            // желто-красно-зеленый
        4 to 38,            // желто-сине-оранжевый
        5 to 20,            // бело-сине-красный
        6 to 24)            // бело-зелено-оранжевый